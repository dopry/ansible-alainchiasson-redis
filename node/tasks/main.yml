---
# tasks file for redis
# Prepare the nodes
- name: Create the node data sub-directory
  file:
    path: "{{ redis_data_dir }}/{{ redis_port }}"
    state: directory
    owner: redis
    group: redis

- name: Create the cluster node redis.conf
  template:
    src: "redis.conf.j2"
    dest: "{{ redis_conf_dir }}/redis_{{ redis_port }}.conf"
  when: ansible_facts['os_family'] != "Debian"

- name: Create the cluster node redis.conf
  template:
    src: "redis.conf.ubuntu.j2"
    dest: "{{ redis_conf_dir }}/redis_{{ redis_port }}.conf"
  when: ansible_facts['os_family'] == "Debian"

- name: Create the node redis service file
  template:
    src: "redis.service.j2"
    dest: "/usr/lib/systemd/system/redis_{{ redis_port }}.service"
  when: ansible_facts['os_family'] != "Debian"

- name: Create the node redis service file
  template:
    src: "redis.service.ubuntu.j2"
    dest: "/lib/systemd/system/redis_{{ redis_port }}.service"
  when: ansible_facts['os_family'] == "Debian"

- name: Debug ansible stuff
  debug:
    var: ansible_selinux


# Add the ports to SELINUX context redis_t (port + cluster port)
- name: Add ports to SELinux cotext redis_t ( port, cluster port )
  seport:
    ports: "{{ redis_port | int }},{{ redis_port | int + 10000 }}"
    proto: tcp
    setype: redis_port_t
    state: present
  when:
    - ansible_selinux is defined
    - ansible_os_family == "RedHat"
    - ansible_selinux.status != "disabled"

- name: sysctl vm.overcommit to ensure background save with low memory.
  sysctl:
    name: vm.overcommit_memory
    value: 1
    sysctl_set: yes
    state: present
    reload: yes

- name: sysctl net.core.somaxconn to enable many connections.
  sysctl:
    name: net.core.somaxconn
    value: 65535
    sysctl_set: yes
    state: present
    reload: yes

- name: start and enable the redis node.
  service:
    name: redis_{{ redis_port }}
    state: started
    enabled: yes
  when: ansible_facts['os_family'] != "Debian"

- name: disable default redis.
  systemd:
    name: redis-server
    state: stopped
    enabled: no
    force: yes
  when: ansible_facts['os_family'] == "Debian"

- name: start and enable the redis node.
  systemd:
    name: redis_{{ redis_port }}
    state: started
    enabled: yes
    daemon_reload: yes
    force: yes
  when: ansible_facts['os_family'] == "Debian"

# Test that all nodes are up
# Cluster them.
